{
  "info": {
    "_postman_id": "authentication-endpoints",
    "name": "Authentication API",
    "description": "Complete authentication endpoints for CleanSheet AI - Register, Login, Token Management, Password Reset, Email Verification",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Register",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePassword123!\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/register",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "register"]
        },
        "description": "Register a new user account. User will receive a verification email."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 201 || pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    if (response._id) {",
              "        pm.collectionVariables.set('userId', response._id);",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "response": []
    },
    {
      "name": "Login",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePassword123!\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "login"]
        },
        "description": "Authenticate user and receive JWT token. Token will be automatically saved to collection variable 'authToken'."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    if (response.token) {",
              "        pm.collectionVariables.set('authToken', response.token);",
              "        console.log('Token saved to authToken variable');",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "response": []
    },
    {
      "name": "Get Profile",
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/profile",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "profile"]
        },
        "description": "Get authenticated user's profile information. Requires JWT token."
      },
      "response": []
    },
    {
      "name": "Refresh Token",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"token\": \"{{authToken}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/refresh-token",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "refresh-token"]
        },
        "description": "Refresh an existing JWT token to get a new token with extended expiration."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    if (response.refresh_token) {",
              "        pm.collectionVariables.set('authToken', response.refresh_token);",
              "        console.log('Token refreshed and saved');",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "response": []
    },
    {
      "name": "Logout",
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/logout",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "logout"]
        },
        "description": "Logout authenticated user. Note: JWT tokens are stateless, client should remove token from storage."
      },
      "response": []
    },
    {
      "name": "Forgot Password",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"john.doe@example.com\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/forgot-password",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "forgot-password"]
        },
        "description": "Request password reset link. An email with reset token will be sent to the user."
      },
      "response": []
    },
    {
      "name": "Reset Password",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"token\": \"{{resetToken}}\",\n  \"newPassword\": \"NewSecurePassword456!\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/reset-password",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "reset-password"]
        },
        "description": "Reset password using token from email. Token expires after 1 hour. Replace {{resetToken}} with actual token from email."
      },
      "response": []
    },
    {
      "name": "Verify Email",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"token\": \"{{verificationToken}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/verify-email",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "verify-email"]
        },
        "description": "Verify user email address using token from email. Replace {{verificationToken}} with actual token from email."
      },
      "response": []
    },
    {
      "name": "Resend Verification Email",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"john.doe@example.com\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/resend-verification",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "resend-verification"]
        },
        "description": "Resend email verification link to user's email address."
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Base URL for the API"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT token - automatically set after login"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string",
      "description": "User ID - automatically set after registration"
    },
    {
      "key": "resetToken",
      "value": "",
      "type": "string",
      "description": "Password reset token from email"
    },
    {
      "key": "verificationToken",
      "value": "",
      "type": "string",
      "description": "Email verification token from email"
    }
  ]
}

